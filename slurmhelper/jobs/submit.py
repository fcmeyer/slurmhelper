def submit_sbatch(id, dirs):
    """
    Helper function to submit sbatch scripts. It does so from a "crashes" file, such that any
    nipype related crash files would dump to a "crashes" directory corresponding to the sbatch submission.
    This hopefully makes debugging a bit easier?
    :param id: sbatch_id (int)
    :param dirs: dirs dictionary generated by calculate_directories.
    :return:
    """
    from pathlib import Path
    import subprocess
    import os

    script_to_submit = Path(dirs["slurm_scripts"]).join(f"sb-{str(id).zfill(4)}.sh")
    if not script_to_submit.exists():
        raise FileNotFoundError(
            f"Script for sbatch_id {id} not found\n\t(expected: {str(script_to_submit)})"
        )

    from_path = Path(dirs["crashes"])
    if not from_path.exists():
        raise FileNotFoundError(
            "Crashes directory not found. Did you initialize this wd correctly?"
        )

    # create directory from which we submit this
    # wd/crashes/sb-####/
    from_path = from_path.join(f"sb-{str(id).zfill(4)}")
    from_path.mkdir(parents=True, exist_ok=True)

    cmd_output = subprocess.check_output(
        ["sbatch", str(script_to_submit)],
        encoding="UTF-8",
        cwd=str(from_path),  # run from the pertinent crashes dir, so things are neat
    )

    # cmd_output should yield:
    # "Submitted batch job 18860277"

    # TODO: parse this so that the sbatch id is correctly extracted. Then, this can be integrated
    #       to an internal database such that we now know what slurm job id corresponds with our internal
    #       sbatch_id.

    return cmd_output
